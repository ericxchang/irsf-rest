package com.iconectiv.irsf.portal.repositories;import com.iconectiv.irsf.portal.config.CustomerContextHolder;import com.iconectiv.irsf.portal.model.customer.ListDefintion;import com.iconectiv.irsf.portal.model.customer.ListUploadRequest;import com.iconectiv.irsf.portal.repositories.customer.ListDefinitionRepository;import com.iconectiv.irsf.portal.repositories.customer.ListUploadRequestRepository;import com.iconectiv.irsf.portal.core.AppConstants;import com.iconectiv.irsf.portal.core.ListType;import com.iconectiv.irsf.util.JsonHelper;import org.junit.Assert;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.TestExecutionListeners;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;import org.springframework.test.context.support.DirtiesContextTestExecutionListener;import org.springframework.test.context.transaction.TransactionalTestExecutionListener;import java.util.ArrayList;import java.util.Arrays;import java.util.Date;import java.util.List;/** * Created by echang on 1/12/2017. */@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(locations={"classpath:spring-cfg.xml", "classpath:spring-jpa.xml"})@TestExecutionListeners({ DependencyInjectionTestExecutionListener.class,        DirtiesContextTestExecutionListener.class,        TransactionalTestExecutionListener.class})public class ListDefinitionAndUploadRepositoryTest {    private static Logger log = LoggerFactory.getLogger(ListDefinitionAndUploadRepositoryTest.class);    @Autowired    private ListDefinitionRepository lstDefRepo;    @Autowired    private ListUploadRequestRepository lstUplReqRepo;    @Before    public void setUp() throws Exception {    }    @Test    public void testFindTop3BLRequest() throws Exception {    	CustomerContextHolder.setSchema("cust01");    	List<ListDefintion> lists = lstDefRepo.findTop3ByTypeAndActiveOrderByLastUpdatedDesc(ListType.Black.value(), true);    	log.info("Total count {}", lists.size());    	Assert.assertTrue(lists == null || lists.size() <= 3);    }      @Test    public void testListDefinitionAndUploadRequest() throws Exception {    	CustomerContextHolder.setSchema("cust01");        ListDefintion listDef = createListDefinition("blacklist-01");        addUploadReq(listDef.getId(), new ArrayList<String>(Arrays.asList("1", "2")));        addUploadReq(listDef.getId(), new ArrayList<String>(Arrays.asList("3", "4")));        log.info(JsonHelper.toJson(lstUplReqRepo.findAllByListRefId(listDef.getId())));        lstDefRepo.delete(listDef.getId());        Assert.assertNull( lstDefRepo.findOne(listDef.getId()));        Assert.assertTrue( lstUplReqRepo.findAllByListRefId(listDef.getId()).size() == 0);    }    private void addUploadReq(Integer listId, List<String> data) {        ListUploadRequest lstLoadReq = new ListUploadRequest();        lstLoadReq.setListRefId(listId);        lstLoadReq.setDelimiter(",");        lstLoadReq.setData(data);        lstLoadReq.setLastUpdatedBy("junit");        lstLoadReq.setLastUpdated(new Date());        lstLoadReq.setStatus(AppConstants.COMPLETE);        lstUplReqRepo.save(lstLoadReq);        return;    }    ListDefintion createListDefinition(String listName) {        ListDefintion item = new ListDefintion();        item.setCustomerName("junitCust");        item.setListName(listName);        item.setCreateBy("junit");        item.setDescription("my black list");        item.setType(AppConstants.BLACKLIST);        item.setCreateTimestamp(new Date());        item.setLastUpdatedBy("junit");        item.setLastUpdated(new Date());        lstDefRepo.save(item);        log.info("Save request {}", item.getId());        log.info(JsonHelper.toJson(lstDefRepo.findOne(item.getId())));        return item;    }}